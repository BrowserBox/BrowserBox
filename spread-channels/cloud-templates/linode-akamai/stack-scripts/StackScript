#!/usr/bin/env bash
# <UDF name="useremail" label="Signature email: I agree to the T&Cs" example="jcitizen@website.net" />
# <UDF name="hostname" label="Hostname: FQDN you will point to this host in your DNS." example="hello.example.com" />
# <UDF name="token" label="Token: Login with HOSTNAME:8080/login?token=TOKEN (optional, auto-generated if blank)" default="" />
# <UDF name="install_doc_viewer" label="Install doc viewer for PDFs? Takes longer" oneOf="true,false" default="false" />
# <UDF name="understanding" label="I will open ports tcp:8078-8082 and add DNS A record" oneOf="true,false" default="true" />
# <UDF name="license_key_password" label="My BrowserBox license key (masked)" example="Purchase at sales@dosaygo.com" />




set -x


# Import Linode Bash Library
source <ssinclude StackScriptID="1">




# --- Utility Functions ---
log() { echo "$@" >&2; }
fail() { log "Error: $1"; shutdown now & exit 1; }
get_distro() {
  [ -f /etc/os-release ] || fail "Cannot determine distribution"
  . /etc/os-release
  echo "$ID"
}




ensure_curl() {
  if command -v curl >/dev/null 2>&1; then
    log "curl is already installed"
    return 0
  fi
  log "curl not found. Attempting to install..."
  local distro=$(get_distro)
  case "$distro" in
    debian|ubuntu|linuxmint|pop|elementary|kali|mx|mxlinux|zorinos)
      if ! apt-get update && apt-get install -y curl; then
        fail "curl install failed"
      fi
      ;;
    centos|fedora|rhel|redhatenterpriseserver|almalinux|rocky|ol|oraclelinux|scientific|amzn)
      yum install -y curl || fail "curl install failed"
      ;;
    *)
      fail "Unsupported distro for curl install: $distro"
      ;;
  esac
  command -v curl >/dev/null 2>&1 || fail "curl installation failed"
  log "curl installed successfully"
}




check_port() {
  local port=$1
  if command -v nc >/dev/null 2>&1; then
    nc -z localhost "$port" && return 0 || return 1
  elif command -v ss >/dev/null 2>&1; then
    ss -tuln | grep -q ":$port" && return 0 || return 1
  elif command -v netstat >/dev/null 2>&1; then
    netstat -tuln | grep -q ":$port" && return 0 || return 1
  else
    log "Warning: No port-checking tool available. Assuming port $port is closed."
    return 1
  fi
}




# --- System Setup Functions ---
install_packages() {
  system_update  # From Bash Library
  system_install_package "git sudo"  # From Bash Library
  ensure_curl
}




# --- Validation Functions ---
validate_inputs() {
  [ -z "$HOSTNAME" ] || [ -z "$USEREMAIL" ] || [ -z "$LICENSE_KEY_PASSWORD" ] && fail "HOSTNAME, USEREMAIL, and LICENSE_KEY_PASSWORD are required"
  [ "$UNDERSTANDING" != "true" ] && fail "You must agree to open ports and set DNS"
}




# --- Deployment Functions ---
generate_token() {
  if [ -z "$TOKEN" ]; then
    TOKEN=$(openssl rand -hex 16 2>/dev/null || head /dev/urandom | tr -dc 'a-f0-9' | head -c 32)
    [ -z "$TOKEN" ] && fail "Failed to generate random token"
  fi
}




deploy_raw() {
  local username="browserbox"
  export BBX_INSTALL_USER="$username"
  export BBX_HOSTNAME="$HOSTNAME"
  export BB_USER_EMAIL="$USEREMAIL"
  export LICENSE_KEY="$LICENSE_KEY_PASSWORD"
  export INSTALL_DOC_VIEWER="$INSTALL_DOC_VIEWER"
  export TOKEN="$TOKEN"
  yes yes | bash <(curl --connect-timeout 22 -sSL bbx.sh.dosaygo.com) install || fail "BBX install script failed"
  su - "$username" <<EOF
    cd "/home/$username" || cd "\$HOME" || fail "Cannot access home dir"
    log() { echo "\$@" >&2; }
    fail() { log "Error: \$1"; exit 1; }
    source ~/.nvm/nvm.sh
    for cmd in bbx setup_bbpro bbcertify bbpro; do
      log "Waiting for \$cmd to be available..."
      timeout 120 bash -c "until command -v \$cmd >/dev/null 2>&1; do sleep 5; done" || fail "\$cmd not available after 120s"
    done
    echo "Login token: $TOKEN" > "/home/$username/token.txt"
    bbx setup --port 8080 --token "$TOKEN" || fail "Setup failed"
    bbcertify || fail "Certification failed - check LICENSE_KEY"
    bbx run || fail "Run failed"
    pm2 save || fail "PM2 save failed"
    pm2_cmd="\$(pm2 startup | grep -v '^\[PM2\]' | awk '/^sudo env/')"
    if [ -n "\$pm2_cmd" ]; then
      eval "\$pm2_cmd" || log "Warning: Failed to execute PM2 startup command"
    else
      log "Warning: PM2 startup command not found; auto-start not configured"
    fi
EOF
  [ $? -ne 0 ] && fail "Raw deployment failed"
}




# --- Post-Install Functions ---
check_ports() {
  if ! check_port 8080; then
    log "Warning: Port 8080 not open. Check firewall."
  fi
  for port in {8078..8082}; do
    if ! check_port "$port"; then
      log "Warning: Port $port not open. WebRTC may fail."
    fi
  done
}




print_success() {
  log "BrowserBox deployed successfully!"
  log "Access it at: https://$HOSTNAME:8080/login?token=$TOKEN"
  log "Token: /home/browserbox/token.txt"
  log "Logs: /home/browserbox/.config/dosyago/bbpro/bbpro.log"
  log "Linode ID: $LINODE_ID, Data Center ID: $LINODE_DATACENTERID"
}




# --- Main Execution ---
main() {
  validate_inputs
  install_packages
  generate_token
  deploy_raw
  check_ports
  print_success
}




main

