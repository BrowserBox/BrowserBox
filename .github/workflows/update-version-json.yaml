name: Update version.json and package.json on Tag Creation

on:
  create:
    ref_type: tag
    ref: v*

jobs:
  update-version-json:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    # Only run if the ref is a tag and matches v*
    if: github.event.ref_type == 'tag' && startsWith(github.event.ref, 'v')

    steps:
      - name: Debug Event Context
        shell: bash
        run: |
          echo "Event: ${{ github.event_name }}"
          echo "Ref: ${{ github.event.ref }}"
          echo "Ref Type: ${{ github.event.ref_type }}"
          echo "Full Ref: ${{ github.ref }}"
          echo "Repository: ${{ github.repository }}"
          echo "SHA: ${{ github.sha }}"

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: main # Start from main to ensure we're branching from the target
          fetch-depth: 0 # Fetch all history for diff against main

      - name: Create and checkout branch
        shell: bash
        run: |
          TAG_NAME=${{ github.event.ref }}
          BRANCH_NAME="update-version-json-$TAG_NAME"
          git checkout -b "$BRANCH_NAME"
          echo "Created and switched to branch: $BRANCH_NAME"

      - name: Set up SSH for signing
        shell: bash
        run: |
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/ssh_key
          chmod 600 ~/ssh_key
          mkdir -p ~/.ssh
          ssh-keygen -y -P "" -f ~/ssh_key > ~/.ssh/bbx_signing_key.pub
          git config --global user.signingkey ~/.ssh/bbx_signing_key.pub
          git config --global gpg.format ssh
          git config --global gpg.ssh.program ssh-keygen
          git config --global commit.gpgsign true
          echo "SSH_AUTH_SOCK=/tmp/ssh-agent.sock" >> $GITHUB_ENV
          ssh-agent -a /tmp/ssh-agent.sock > /tmp/ssh-agent.env
          source /tmp/ssh-agent.env
          ssh-add ~/ssh_key

      - name: Configure Git
        shell: bash
        run: |
          git config --global user.name "DOSAYGO Engineering"
          git config --global user.email "development.team@dosyago.com"

      - name: Debug file state
        shell: bash
        run: |
          echo "Repository contents:"
          ls -la
          if [ -f package.json ]; then
            echo "Current package.json:"
            cat package.json
          else
            echo "package.json not found"
            exit 1
          fi
          if [ -f version.json ]; then
            echo "Current version.json:"
            cat version.json
          else
            echo "version.json not found"
          fi

      - name: Update version.json and package.json
        shell: bash
        run: |
          TAG_NAME=${{ github.event.ref }}
          if [[ ! "$TAG_NAME" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Error: Tag '$TAG_NAME' does not match expected format (e.g., v11.0.5)"
            exit 1
          fi
          echo "{\"tag\": \"$TAG_NAME\"}" > version.json
          # Remove 'v' prefix for package.json version (e.g., v11.0.5 -> 11.0.5)
          VERSION=${TAG_NAME#v}
          jq ".version = \"$VERSION\"" package.json > package.json.tmp && mv package.json.tmp package.json
          echo "Updated version.json:"
          cat version.json
          echo "Updated package.json:"
          cat package.json
          git fetch origin main:main
          echo "Diff against main:"
          git diff origin/main -- package.json version.json
          if git diff --quiet origin/main -- package.json version.json; then
            echo "No changes detected in package.json or version.json compared to main."
            echo "has_changes=false" >> $GITHUB_OUTPUT
          else
            echo "Changes detected in package.json or version.json."
            echo "has_changes=true" >> $GITHUB_OUTPUT
          fi
          TAG_NAME=${{ github.event.ref }}
          BRANCH_NAME="update-version-json-$TAG_NAME"
          git add --force version.json package.json
          echo "Git status:"
          git status
          echo "Git diff:"
          git diff --cached
          git commit -m "Update version.json and package.json for $TAG_NAME"
          git push origin "$BRANCH_NAME"
          echo "Verifying branch exists on remote:"
          git ls-remote --heads origin "$BRANCH_NAME"

      - name: Debug branch state
        if: steps.check-changes.outputs.has_changes == 'true'
        run: |
          echo "Current branch:"
          git rev-parse --abbrev-ref HEAD
          echo "Remote branches:"
          git ls-remote --heads origin
          echo "Checking for branch update-version-json-${{ github.event.ref }}:"
          git ls-remote --heads origin "update-version-json-${{ github.event.ref }}"

      - name: Create Pull Request
        if: steps.check-changes.outputs.has_changes == 'true'
        id: create-pr
        uses: peter-evans/create-pull-request@271a8d0340265f705b14b6d32b9829c1cb33d45e # v7.0.8
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: update-version-json-${{ github.event.ref }}
          base: main
          title: Update version.json and package.json for ${{ github.event.ref }}
          body: |
            This PR updates `version.json` and `package.json` with the tag `${{ github.event.ref }}` for the latest release.
            Please review and merge to include it in the main branch.
          labels: automated, version-update
          reviewers: o0101
          commit-message: Update version.json and package.json for ${{ github.event.ref }}
          committer: DOSAYGO Engineering <development.team@dosyago.com>
          delete-branch: false # Prevent deletion if PR is skipped

      - name: Debug Pull Request Creation
        run: |
          echo "Create PR Action Output:"
          echo "PR Number: ${{ steps.create-pr.outputs.pull-request-number }}"
          echo "PR URL: ${{ steps.create-pr.outputs.pull-request-url }}"
          echo "PR Operation: ${{ steps.create-pr.outputs.pull-request-operation }}"
          echo "PR Branch: ${{ steps.create-pr.outputs.pull-request-branch }}"
          echo "PR Head SHA: ${{ steps.create-pr.outputs.pull-request-head-sha }}"
          if [ "${{ steps.check-changes.outputs.has_changes }}" == "false" ]; then
            echo "Skipped PR creation because no changes were detected."
          elif [ -z "${{ steps.create-pr.outputs.pull-request-number }}" ]; then
            echo "No PR was created. Checking for errors..."
            git log -1
            git status
            git diff origin/main -- package.json version.json
            exit 1
          else
            echo "PR created successfully!"
          fi

      - name: Clean up SSH
        if: always()
        run: |
          rm -f ~/ssh_key
          rm -rf ~/.ssh
