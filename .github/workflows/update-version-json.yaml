name: Update version.json and package.json on Tag Creation

on:
  create:
    ref_type: tag
    ref: v[0-9]+.[0-9]+.[0-9]+-rc

jobs:
  update-version-json:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    if: github.event.ref_type == 'tag' && startsWith(github.event.ref, 'v') && endsWith(github.event.ref, '-rc')

    steps:
      - name: Debug Event Context
        run: |
          echo "Event: ${{ github.event_name }}"
          echo "Ref: ${{ github.event.ref }}"
          echo "Ref Type: ${{ github.event.ref_type }}"
          echo "Repository: ${{ github.repository }}"
          echo "SHA: ${{ github.sha }}"

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0

      - name: Debug main branch state
        run: |
          git pull
          echo "Main branch HEAD commit:"
          git log -1 origin/main
          echo "Main package.json:"
          cat package.json || echo "package.json not found"
          echo "Main version.json:"
          cat version.json || echo "version.json not found"

      - name: Check if update is needed
        id: check-update
        run: |
          TAG_NAME=${{ github.event.ref }}
          TAG_NAME=${TAG_NAME%-rc}
          VERSION=${TAG_NAME#v}
          MAIN_VERSION=$(jq -r '.version' package.json)
          echo "Main package.json version: $MAIN_VERSION"
          if [ -f version.json ]; then
            MAIN_TAG=$(jq -r '.tag' version.json)
            echo "Main version.json tag: $MAIN_TAG"
          else
            MAIN_TAG="none"
            echo "version.json not found"
          fi
          if [ "$MAIN_VERSION" = "$VERSION" ] && [ "$MAIN_TAG" = "$TAG_NAME" ]; then
            echo "No update needed"
            echo "needs_update=false" >> $GITHUB_OUTPUT
          else
            echo "Update needed: main has version $MAIN_VERSION and tag $MAIN_TAG"
            echo "needs_update=true" >> $GITHUB_OUTPUT
          fi
          echo "tag_name=${TAG_NAME}" >> $GITHUB_OUTPUT
          echo "version=${VERSION}" >> $GITHUB_OUTPUT

      - name: Create and checkout branch
        if: steps.check-update.outputs.needs_update == 'true'
        run: |
          BRANCH_NAME="update-version-json-${{ steps.check-update.outputs.tag_name }}"
          git checkout -b "$BRANCH_NAME"
          echo "Created branch: $BRANCH_NAME"

      - name: Set up SSH for signing
        if: steps.check-update.outputs.needs_update == 'true'
        run: |
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/ssh_key
          chmod 600 ~/ssh_key
          mkdir -p ~/.ssh
          ssh-keygen -y -P "" -f ~/ssh_key > ~/.ssh/bbx_signing_key.pub
          git config --global user.signingkey ~/.ssh/bbx_signing_key.pub
          git config --global gpg.format ssh
          git config --global gpg.ssh.program ssh-keygen
          git config --global commit.gpgsign true
          echo "SSH_AUTH_SOCK=/tmp/ssh-agent.sock" >> $GITHUB_ENV
          ssh-agent -a /tmp/ssh-agent.sock > /tmp/ssh-agent.env
          source /tmp/ssh-agent.env
          ssh-add ~/ssh_key

      - name: Configure Git
        if: steps.check-update.outputs.needs_update == 'true'
        run: |
          git config --global user.name "DOSAYGO Engineering"
          git config --global user.email "development.team@dosyago.com"

      - name: Update version.json and package.json
        if: steps.check-update.outputs.needs_update == 'true'
        run: |
          TAG_NAME=${{ steps.check-update.outputs.tag_name }}
          VERSION=${{ steps.check-update.outputs.version }}
          echo "{\"tag\": \"$TAG_NAME\"}" > version.json
          jq ".version = \"$VERSION\"" package.json > package.json.tmp && mv package.json.tmp package.json
          echo "Updated version.json:"
          cat version.json
          echo "Updated package.json:"
          cat package.json
          git diff origin/main -- package.json version.json

      - name: Commit and push branch
        if: steps.check-update.outputs.needs_update == 'true'
        run: |
          BRANCH_NAME="update-version-json-${{ steps.check-update.outputs.tag_name }}"
          git add version.json package.json
          git commit -m "Update version.json and package.json for ${{ steps.check-update.outputs.tag_name }}"
          git push origin "$BRANCH_NAME"
          echo "Pushed branch: $BRANCH_NAME"

      - name: Push tag
        if: steps.check-update.outputs.needs_update == 'true'
        run: |
          TAG_NAME=${{ steps.check-update.outputs.tag_name }}
          git tag "$TAG_NAME"
          git push origin "$TAG_NAME" || {
            echo "Error: Failed to push tag $TAG_NAME. Check if GITHUB_TOKEN has sufficient permissions."
            echo "Consider using a PAT with 'repo' scope stored in secrets as PAT_TOKEN."
            exit 1
          }
          echo "Pushed tag: $TAG_NAME"

      - name: Debug branch state
        if: steps.check-update.outputs.needs_update == 'true'
        run: |
          echo "Current branch:"
          git rev-parse --abbrev-ref HEAD
          echo "Branch HEAD commit:"
          git log -1
          echo "Git status:"
          git status
          echo "Remote branches:"
          git ls-remote --heads origin
          echo "Tags:"
          git ls-remote --tags origin
          echo "Commit signature:"
          git log -1 --show-signature

      - name: Create Pull Request
        if: steps.check-update.outputs.needs_update == 'true'
        run: |
          BRANCH_NAME="update-version-json-${{ steps.check-update.outputs.tag_name }}"
          PR_TITLE="Update version.json and package.json for ${{ steps.check-update.outputs.tag_name }}"
          PR_BODY="This PR updates version.json and package.json with tag ${{ steps.check-update.outputs.tag_name }} for the latest release."
          RESPONSE=$(curl -s -X POST \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/${{ github.repository }}/pulls \
            -d "{\"head\":\"$BRANCH_NAME\",\"base\":\"main\",\"title\":\"$PR_TITLE\",\"body\":\"$PR_BODY\",\"maintainer_can_modify\":true}")
          PR_NUMBER=$(echo "$RESPONSE" | jq -r '.number')
          PR_URL=$(echo "$RESPONSE" | jq -r '.html_url')
          if [ "$PR_NUMBER" != "null" ]; then
            echo "Created PR #$PR_NUMBER: $PR_URL"
          else
            echo "Error: Failed to create PR"
            echo "Response: $RESPONSE"
            exit 1
          fi

      - name: Clean up SSH
        if: always()
        run: |
          rm -f ~/ssh_key
          rm -rf ~/.ssh
