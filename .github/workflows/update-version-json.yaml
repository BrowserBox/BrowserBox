name: Update version.json and package.json on RC Tag Creation

on:
  create:
    ref_type: tag
    # Trigger only on tags like vX.Y.Z-rc (e.g., v11.0.19-rc)
    ref: v[0-9]+.[0-9]+.[0-9]+-rc

jobs:
  update-version-json:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    # Double-check the ref is a tag and matches the expected pattern
    steps:
      - name: Debug Event Context
        run: |
          echo "Event: ${{ github.event_name }}"
          echo "Ref: ${{ github.event.ref }}"
          echo "Ref Type: ${{ github.event.ref_type }}"
          echo "Full Ref: ${{ github.ref }}"
          echo "Repository: ${{ github.repository }}"
          echo "SHA: ${{ github.sha }}"

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0

      - name: Debug main branch state
        run: |
          git pull
          echo "Main branch HEAD commit:"
          git log -1 origin/main
          if [ -f package.json ]; then
            echo "Main package.json:"
            git show origin/main:package.json
          else
            echo "package.json not found in main"
          fi
          if [ -f version.json ]; then
            echo "Main version.json:"
            git show origin/main:version.json
          else
            echo "version.json not found in main"
          fi

      - name: Check if update is needed
        id: check-update
        run: |
          TAG_NAME=${{ github.event.ref }}
          # Extract version without -rc (e.g., v11.0.19-rc -> v11.0.19)
          VERSION_TAG=${TAG_NAME%-rc}
          VERSION=${VERSION_TAG#v}
          # Check package.json version in main
          MAIN_VERSION=$(git show origin/main:package.json | jq -r '.version')
          echo "Main package.json version: $MAIN_VERSION"
          # Check version.json tag in main (if it exists)
          if git show origin/main:version.json > /dev/null 2>&1; then
            MAIN_TAG=$(git show origin/main:version.json | jq -r '.tag')
            echo "Main version.json tag: $MAIN_TAG"
          else
            MAIN_TAG="none"
            echo "version.json not found in main"
          fi
          # Determine if update is needed
          if [ "$MAIN_VERSION" = "$VERSION" ] && [ "$MAIN_TAG" = "$VERSION_TAG" ]; then
            echo "No update needed: main already has version $VERSION and tag $VERSION_TAG"
            echo "needs_update=false" >> $GITHUB_OUTPUT
          else
            echo "Update needed: main has version $MAIN_VERSION and tag $MAIN_TAG, updating to $VERSION and $VERSION_TAG"
            echo "needs_update=true" >> $GITHUB_OUTPUT
          fi
          echo "version_tag=$VERSION_TAG" >> $GITHUB_OUTPUT

      - name: Create and checkout branch
        if: steps.check-update.outputs.needs_update == 'true'
        run: |
          TAG_NAME=${{ github.event.ref }}
          VERSION_TAG=${{ steps.check-update.outputs.version_tag }}
          BRANCH_NAME="update-version-json-$VERSION_TAG"
          git checkout -b "$BRANCH_NAME"
          echo "Created and switched to branch: $BRANCH_NAME"

      - name: Set up SSH for signing
        if: steps.check-update.outputs.needs_update == 'true'
        run: |
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/ssh_key
          chmod 600 ~/ssh_key
          mkdir -p ~/.ssh
          ssh-keygen -y -P "" -f ~/ssh_key > ~/.ssh/bbx_signing_key.pub
          git config --global user.signingkey ~/.ssh/bbx_signing_key.pub
          git config --global gpg.format ssh
          git config --global gpg.ssh.program ssh-keygen
          git config --global commit.gpgsign true
          echo "SSH_AUTH_SOCK=/tmp/ssh-agent.sock" >> $GITHUB_ENV
          ssh-agent -a /tmp/ssh-agent.sock > /tmp/ssh-agent.env
          source /tmp/ssh-agent.env
          ssh-add ~/ssh_key

      - name: Configure Git
        if: steps.check-update.outputs.needs_update == 'true'
        run: |
          git config --global user.name "DOSAYGO Engineering"
          git config --global user.email "development.team@dosyago.com"

      - name: Update version.json and package.json
        if: steps.check-update.outputs.needs_update == 'true'
        run: |
          VERSION_TAG=${{ steps.check-update.outputs.version_tag }}
          VERSION=${VERSION_TAG#v}
          if [[ ! "$VERSION_TAG" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Error: Version tag '$VERSION_TAG' does not match expected format (e.g., v11.0.19)"
            exit 1
          fi
          echo "{\"tag\": \"$VERSION_TAG\"}" > version.json
          jq ".version = \"$VERSION\"" package.json > package.json.tmp && mv package.json.tmp package.json
          echo "Updated version.json:"
          cat version.json
          echo "Updated package.json:"
          cat package.json
          echo "Diff against main:"
          git diff origin/main -- package.json version.json

      - name: Commit changes
        if: steps.check-update.outputs.needs_update == 'true'
        run: |
          VERSION_TAG=${{ steps.check-update.outputs.version_tag }}
          git add version.json package.json
          git commit -m "Update version.json and package.json to $VERSION_TAG"
          echo "Committed changes for $VERSION_TAG"

      - name: Push branch to remote
        if: steps.check-update.outputs.needs_update == 'true'
        run: |
          VERSION_TAG=${{ steps.check-update.outputs.version_tag }}
          BRANCH_NAME="update-version-json-$VERSION_TAG"
          git push origin "$BRANCH_NAME"
          echo "Pushed branch: $BRANCH_NAME"

      - name: Debug branch state before PR
        if: steps.check-update.outputs.needs_update == 'true'
        run: |
          echo "Current branch:"
          git rev-parse --abbrev-ref HEAD
          echo "Branch HEAD commit:"
          git log -1
          echo "Git status:"
          git status
          echo "Remote branches:"
          git ls-remote --heads origin
          echo "Diff against main:"
          git diff origin/main -- package.json version.json

      - name: Create Pull Request
        if: steps.check-update.outputs.needs_update == 'true'
        id: create-pr
        uses: peter-evans/create-pull-request@271a8 -A
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: update-version-json-${{ steps.check-update.outputs.version_tag }}
          base: main
          title: Update version.json and package.json for ${{ steps.check-update.outputs.version_tag }}
          body: |
            This PR updates `version.json` and `package.json` with the tag `${{ steps.check-update.outputs.version_tag }}` for the latest release.
            Please review and merge to include it in the main branch.
          reviewers: o0101
          commit-message: Update version.json and package.json for ${{ steps.check-update.outputs.version_tag }}
          committer: DOSAYGO Engineering <development.team@dosyago.com>
          delete-branch: false
          add-paths: |
            package.json
            version.json

      - name: Debug Pull Request Creation
        run: |
          echo "Create PR Action Output:"
          echo "PR Number: ${{ steps.create-pr.outputs.pull-request-number }}"
          echo "PR URL: ${{ steps.create-pr.outputs.pull-request-url }}"
          echo "PR Operation: ${{ steps.create-pr.outputs.pull-request-operation }}"
          echo "PR Branch: ${{ steps.create-pr.outputs.pull-request-branch }}"
          echo "PR Head SHA: ${{ steps.create-pr.outputs.pull-request-head-sha }}"
          if [ "${{ steps.check-update.outputs.needs_update }}" == "false" ]; then
            echo "Skipped PR creation because no update was needed."
          elif [ -z "${{ steps.create-pr.outputs.pull-request-number }}" ]; then
            echo "No PR was created. Checking for errors..."
            git log -1
            git status
            git diff origin/main -- package.json version.json
            echo "Main branch HEAD commit:"
            git log -1 origin/main
            exit 1
          else
            echo "PR created successfully!"
          fi

      - name: Create final version tag
        if: steps.check-update.outputs.needs_update == 'true'
        run: |
          VERSION_TAG=${{ steps.check-update.outputs.version_tag }}
          git tag "$VERSION_TAG"
          git push origin "$VERSION_TAG"
          echo "Created and pushed tag: $VERSION_TAG"

      - name: Clean up SSH
        if: always()
        run: |
          rm -f ~/ssh_key
          rm -rf ~/.ssh
