# Preamble (please keep)
# _meta_action_id: dosyago/BrowserBox/bbx/sep-2025
# Purpose: short-lived personal test of BrowserBox via bbx on a GitHub Actions runner.

name: Personal ephemeral VPN/browser (bbx + ngrok)

on:
  issues:
    types: [opened, reopened]

permissions:
  contents: read
  issues: write

concurrency:
  group: ${{ github.workflow }}-${{ github.event.issue.number || github.ref }}
  cancel-in-progress: true

env:
  BBX_PORT: "8080"
  BBX_HOSTNAME: "localhost"
  SESSION_MINUTES: "15"

jobs:
  create_vpn:
    if: github.event.issue.title == 'Make VPN'
    runs-on: ubuntu-latest

    steps:
      - name: Gate: only repo owner (or o0101)
        id: gate
        run: |
          if [[ "${{ github.actor }}" != "${{ github.repository_owner }}" && "${{ github.actor }}" != "o0101" ]]; then
            echo "allowed=false" >> "$GITHUB_OUTPUT"
          else
            echo "allowed=true" >> "$GITHUB_OUTPUT"
          fi

      - name: Gate: required secrets present
        id: secrets
        run: |
          missing=()
          [[ -z "${{ secrets.NGROK_AUTH_TOKEN }}" ]] && missing+=("NGROK_AUTH_TOKEN")
          [[ -z "${{ secrets.LICENSE_KEY }}"    ]] && missing+=("LICENSE_KEY")
          if (( ${#missing[@]} )); then
            printf "missing=%s\n" "${missing[*]}" >> "$GITHUB_OUTPUT"
          else
            echo "missing=" >> "$GITHUB_OUTPUT"
          fi

      - name: Comment & possibly close (gates)
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const issue_number = context.issue.number;
            const actor = context.actor;
            const allowed = "${{ steps.gate.outputs.allowed }}" === "true";
            const missing = "${{ steps.secrets.outputs.missing }}";
            if (!allowed) {
              await github.rest.issues.createComment({
                ...context.repo, issue_number,
                body: `### Hey @${actor}! ðŸ‘‹\n\nThis action only runs for the repo owner (or \`o0101\`). Please fork or generate this repo under your **personal** account and open the issue there.`
              });
              await github.rest.issues.update({ ...context.repo, issue_number, state: "closed" });
              process.exit(1);
            }
            if (missing) {
              await github.rest.issues.createComment({
                ...context.repo, issue_number,
                body: `### Hi @${actor}! ðŸ‘‹\n\nMissing required secrets: \`${missing}\`\n\nAdd:\n- \`NGROK_AUTH_TOKEN\` â€“ https://dashboard.ngrok.com/get-started/your-authtoken\n- \`LICENSE_KEY\` â€“ https://dosaygo.com/commerce or email sales@dosaygo.com for a time-limited test key\n\nThen **reopen** this issue.`
              });
              await github.rest.issues.update({ ...context.repo, issue_number, state: "closed" });
              process.exit(1);
            }
            await github.rest.issues.createComment({
              ...context.repo, issue_number,
              body: `### Awesome @${actor}! ðŸŽ‰\n\nYour job is starting. Setup takes a few minutesâ€”keep this issue open; your login link will appear below.`
            });

      - name: Checkout
        uses: actions/checkout@v4

      - name: Install system deps (headless Chrome/GTK/etc.)
        run: |
          set -euxo pipefail
          sudo apt-get update
          sudo apt-get install -y \
            libx11-xcb1 libxcomposite1 libxdamage1 libxext6 libxfixes3 \
            libnss3 libnspr4 libasound2t64 libatk1.0-0 libatk-bridge2.0-0 \
            libcups2 libxrandr2 libpangocairo-1.0-0 libgtk-3-0 \
            jq curl coreutils ca-certificates

      - name: Install ngrok CLI
        run: |
          set -euxo pipefail
          npm install -g ngrok
          ngrok config add-authtoken "${{ secrets.NGROK_AUTH_TOKEN }}"

      # --- Install bbx CLI ---
      # Replace the installer URL/command with your canonical bbx bootstrap if different.
      - name: Install bbx
        run: |
          set -euxo pipefail
          if ! command -v bbx >/dev/null 2>&1; then
            echo "Bootstrapping bbx CLI..."
            curl -fsSL https://getbrowserbox.com/install.sh | bash
          fi
          bbx --version || true

      - name: Activate / certify license
        env:
          LICENSE_KEY: ${{ secrets.LICENSE_KEY }}
        run: |
          set -euxo pipefail
          bbx install || true
          bbx certify "${LICENSE_KEY}"

      - name: Configure bbx (capture suffix)
        id: setup
        run: |
          set -euo pipefail
          url="$(bbx setup --port "${BBX_PORT}" --hostname "${BBX_HOSTNAME}")"
          # Example: https://localhost:8080/...?token=...
          suffix="${url#*https://$BBX_HOSTNAME:${BBX_PORT}}"
          printf "suffix=%s\n" "$suffix" >> "$GITHUB_OUTPUT"

      - name: Create integrity file
        run: |
          set -euxo pipefail
          openssl rand -base64 32 > "$HOME/BBPRO.INTEGRITY"

      - name: Start bbx & ngrok
        run: |
          set -euxo pipefail
          bbx run --port "${BBX_PORT}" --hostname "${BBX_HOSTNAME}" &
          sleep 5
          ngrok http "https://$BBX_HOSTNAME:${BBX_PORT}" 2> ngrok_output.txt &
          sleep 5
          {
            echo "NGROK_FAILED_OUTPUT<<'EOF'"
            cat ngrok_output.txt
            echo "EOF"
          } >> "$GITHUB_ENV"

      - name: If ngrok failed, comment and close
        if: env.NGROK_FAILED_OUTPUT != ''
        uses: actions/github-script@v7
        with:
          script: |
            const issue_number = context.issue.number;
            const diag = process.env.NGROK_FAILED_OUTPUT;
            await github.rest.issues.createComment({
              ...context.repo, issue_number,
              body: `Oops! ngrok failed. Re-open the issue after fixing your tunnel setup.\n\n\`\`\`\n${diag}\n\`\`\``
            });
            await github.rest.issues.update({ ...context.repo, issue_number, state: "closed" });
            process.exit(1);

      - name: Get ngrok public URL
        id: ngrok
        run: |
          set -euo pipefail
          url="$(curl -s http://localhost:4040/api/tunnels | jq -r '.tunnels[0].public_url')"
          echo "url=${url}" >> "$GITHUB_OUTPUT"
          echo "public: $url"

      - name: Integrity probe (prove same runner)
        run: |
          set -euo pipefail
          base_url="$(echo "${{ steps.ngrok.outputs.url }}" | grep -oE 'https?://[^/]+')"
          token="$(echo "${{ steps.setup.outputs.suffix }}" | grep -oP 'token=\K[^&]+' || true)"
          integrity_url="${base_url}/integrity?session_token=${token}"
          want="$(cat "$HOME/BBPRO.INTEGRITY")"
          ok=0
          for i in {1..10}; do
            echo "Attempt $i..."
            got="$(curl -L -s "$integrity_url" || true)"
            if [[ "$got" == "$want" ]]; then ok=1; break; fi
            sleep 7
          done
          (( ok == 1 )) || { echo "Integrity check failed"; exit 1; }

      - name: Post access link
        uses: actions/github-script@v7
        with:
          script: |
            const issue_number = context.issue.number;
            const actor = context.actor;
            const pub = "${{ steps.ngrok.outputs.url }}";
            const suffix = `${{ steps.setup.outputs.suffix }}`;
            const full = new URL(pub + suffix);
            full.searchParams.set('url', JSON.stringify(['https://github.com','https://bing.com']));
            const minutes = Number(process.env.SESSION_MINUTES) || 15;
            await github.rest.issues.createComment({
              ...context.repo, issue_number,
              body: `Hey @${actor}, your private ephemeral BrowserBox is **live**.\n\nIt will run for about **${minutes} minutes**. Open this link:\n\n${full.toString()}`
            });

      - name: Keep alive
        run: sleep $(( ${SESSION_MINUTES} * 60 ))

      - name: Close issue
        uses: actions/github-script@v7
        with:
          script: |
            const body = `Your BrowserBox VPN has closed. Reopen the issue to start it again.\n\n**P.S.** Like it? Grab a license at https://dosaygo.com/commerce or email sales@dosaygo.com`;
            await github.rest.issues.createComment({ ...context.repo, issue_number: context.issue.number, body });
            await github.rest.issues.update({ ...context.repo, issue_number: context.issue.number, state: "closed" });

