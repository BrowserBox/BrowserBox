# Preamble (please keep)
# _meta_action_id: dosyago/BrowserBox/bbx/sep-2025-unified
# Purpose: short-lived personal test of BrowserBox via bbx on a GitHub Actions runner.
name: Personal ephemeral BrowserBox (bbx + tor|ssh)

on:
  issues:
    types: [opened, edited] # Control Panel edits drive runs
  push:
    branches: [vpn123] # Manual branch testing

permissions:
  contents: read
  issues: write

concurrency:
  group: ${{ github.workflow }}-${{ github.event.issue.number || github.ref }}
  cancel-in-progress: true

env:
  BBX_PORT: "8080"
  BBX_HOSTNAME: "127.0.0.1" # explicit IPv4 bind
  SESSION_MINUTES: "40"
  REQUIRE_RSA: "false" # set to "true" to block plaintext posting
  WIN9X_COMPATIBILITY_MODE: "true" # force bbx to serve HTTP (needed for free localhost.run HTTP tunnel)

jobs:
  # -------------------------------------------------
  # UI/status job: parses control panel & posts status
  # -------------------------------------------------
  ui_status:
    if: >
      github.event_name != 'push' &&
      github.event.issue &&
      github.event.issue.pull_request == null &&
      github.event.issue.title == 'Make VPN'
    runs-on: ubuntu-latest
    outputs:
      mode: ${{ steps.parse.outputs.mode }}
      encrypt: ${{ steps.parse.outputs.encrypt }}
      onflag: ${{ steps.parse.outputs.onflag }}
      hasRSA: ${{ steps.rsa.outputs.has }}
      missing: ${{ steps.secrets.outputs.missing }}
    steps:
      - name: Parse control panel
        id: parse
        run: |
          set -euo pipefail
          body="$(jq -r '.issue.body // ""' "$GITHUB_EVENT_PATH")"
          clean="$(printf '%s' "$body" | sed -E 's/<!--[^>]*-->//g' | tr -d '\r')"
          # Defaults
          mode="tor"
          encrypt="1" # default ON
          onflag="0"
          has_checked () {
            printf '%s\n' "$clean" | grep -qiE \
              "^[[:space:]]*-[[:space:]]*\\[x\\][[:space:]]*$1([[:space:]]|$)"
          }
          # ON iff the ON line is checked
          if has_checked "on"; then onflag="1"; fi
          # Tunnel selection (explicit checks override; tor default)
          if has_checked "ssh"; then mode="ssh"; fi
          if has_checked "tor"; then mode="tor"; fi
          # Encrypt default ON; turn OFF if explicitly unchecked
          if printf '%s\n' "$clean" | grep -qiE \
            '^[[:space:]]*-[[:space:]]*\[[[:space:]]\][[:space:]]*encrypt([[:space:]]|$)'; then
            encrypt="0"
          fi
          {
            echo "mode=$mode"
            echo "encrypt=$encrypt"
            echo "onflag=$onflag"
          } >> "$GITHUB_OUTPUT"

      - name: Detect GitHub RSA key (for messaging)
        id: rsa
        env:
          ACTOR: ${{ github.actor }}
        run: |
          set -euo pipefail
          mkdir -p .secure
          curl -sfL -H 'Accept: application/vnd.github+json' -H 'User-Agent: bbx-workflow' \
            "https://api.github.com/users/${ACTOR}/keys" -o .secure/keys.json || true
          rsa="$(jq -r '.[] | .key' .secure/keys.json 2>/dev/null | awk "/^ssh-rsa /{print; exit}" || true)"
          if [[ -z "$rsa" ]]; then
            curl -sfL -H 'User-Agent: bbx-workflow' "https://github.com/${ACTOR}.keys" -o .secure/keys.plain || true
            rsa="$(awk "/^ssh-rsa /{print; exit}" .secure/keys.plain || true)"
          fi
          echo "has=$([[ -n "$rsa" ]] && echo 1 || echo 0)" >> "$GITHUB_OUTPUT"

      - name: Check required secrets (mode-aware)
        id: secrets
        run: |
          missing=()
          [[ -z "${{ secrets.BB_LICENSE_KEY }}" ]] && missing+=("BB_LICENSE_KEY")
          if (( ${#missing[@]} )); then printf "missing=%s\n" "${missing[*]}" >> "$GITHUB_OUTPUT"; else echo "missing=" >> "$GITHUB_OUTPUT"; fi

      - name: Upsert BrowserBox Status comment
        uses: actions/github-script@v7
        with:
          script: |
            const issue_number = context.issue.number;
            const mode = "${{ steps.parse.outputs.mode }}";
            const encrypt = "${{ steps.parse.outputs.encrypt }}" === "1";
            const hasRSA = "${{ steps.rsa.outputs.has }}" === "1";
            const onflag = "${{ steps.parse.outputs.onflag }}" === "1";
            const missing = ("${{ steps.secrets.outputs.missing }}").trim();
            const header = "### BrowserBox Status";
            const cfg = [
              `- Power: **${onflag ? "ON" : "OFF"}**`,
              `- Tunnel: **${mode.toUpperCase()}**`,
              `- Encryption: **${encrypt ? "ON (RSA required)" : "OFF"}**`,
              missing ? `- Secrets: **Missing — ${missing}**` : `- Secrets: **OK**`,
              encrypt && !hasRSA ? `- RSA key: **NOT FOUND** (add one: https://github.com/settings/keys)` : `- RSA key: **${encrypt ? (hasRSA ? "Found" : "Required") : "Not required"}**`,
            ].join("\n");
            const fixList = missing
              ? [
                  "",
                  "**Fix & Retry**",
                  ...(missing.includes("BB_LICENSE_KEY") ? ["- [ ] Add `BB_LICENSE_KEY` — https://dosaygo.com/commerce (or sales@dosaygo.com for a time-limited key)"] : []),
                  "- Then edit the **Control Panel** above and toggle **Power** OFF → ON to retry."
                ].join("\n")
              : "";
            const body = `${header}
            ${cfg}
            ${fixList}
            **Stages:** (updated automatically)
            - 🟡 Queued
            `;
            const { data: comments } = await github.rest.issues.listComments({ ...context.repo, issue_number, per_page: 100 });
            const mine = comments.find(c => c.user.type === "Bot" && (c.body||"").includes(header));
            if (mine) {
              await github.rest.issues.updateComment({ ...context.repo, comment_id: mine.id, body });
            } else {
              await github.rest.issues.createComment({ ...context.repo, issue_number, body });
            }

  # -------------------------------------------------
  # Runner job: auto-starts when ON is checked
  # -------------------------------------------------
  run_bbx:
    if: >
      (github.event_name == 'push' && startsWith(github.ref, 'refs/heads/vpn123')) ||
      (github.event_name == 'issues' &&
       github.event.action == 'edited' &&
       github.event.issue &&
       github.event.issue.pull_request == null &&
       github.event.issue.title == 'Make VPN' &&
       contains(github.event.issue.body, '- [x] ON'))
    runs-on: ubuntu-latest
    steps:
      - name: Export basics
        run: |
          echo "ISSUE_NUMBER=${{ github.event.issue.number || '' }}" >> "$GITHUB_ENV"
          echo "REPO=${{ github.repository }}" >> "$GITHUB_ENV"
          echo "RUN_URL=${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}" >> "$GITHUB_ENV"

      - name: Stage → Starting
        if: github.event_name != 'push'
        uses: actions/github-script@v7
        with:
          script: |
            const issue_number = context.issue.number;
            const header = "### BrowserBox Status";
            const { data: comments } = await github.rest.issues.listComments({ ...context.repo, issue_number, per_page: 100 });
            const mine = comments.find(c => c.user.type === "Bot" && (c.body||"").includes(header));
            if (mine) {
              const base = (mine.body || "").split("\n**Stages:**")[0];
              const body = `${base}
            **Stages:** (updated automatically)
            - 🛠️ Starting…
            `;
              await github.rest.issues.updateComment({ ...context.repo, comment_id: mine.id, body });
            }

      - name: only repo owner
        id: owner_gate
        run: |
          if [[ "${{ github.actor }}" != "${{ github.repository_owner }}" && "${{ github.actor }}" != "o0101" ]]; then
            echo "allowed=false" >> "$GITHUB_OUTPUT"
          else
            echo "allowed=true" >> "$GITHUB_OUTPUT"
          fi

      - name: Abort early if not allowed / wrong issue / OFF
        if: github.event_name != 'push'
        uses: actions/github-script@v7
        with:
          script: |
            const issue_number = context.issue.number;
            const allowed = "${{ steps.owner_gate.outputs.allowed }}" === "true";
            const raw = (context.payload.issue.body || "");
            const clean = raw.replace(/\r/g, '').replace(/<!--[^>]*-->/g, '');
            const onChecked = /(^|\n)\s*-\s*\[x\]\s*on(\s|$)/i.test(clean);
            const badTitle = context.payload.issue.title !== "Make VPN";
            const isPR = !!context.payload.issue.pull_request;
            if (!allowed || !onChecked || badTitle || isPR) {
              const body = `Run aborted (allowed: ${allowed}, ON: ${onChecked}, title_ok: ${!badTitle}, is_pr: ${isPR}). Toggle **ON** in the Control Panel to start.`;
              await github.rest.issues.createComment({ ...context.repo, issue_number, body });
              core.setFailed("Aborted by preconditions");
            }

      - name: Check secrets (runner) & update status
        env:
          BB_LICENSE_KEY: ${{ secrets.BB_LICENSE_KEY }}
        if: github.event_name != 'push'
        uses: actions/github-script@v7
        with:
          script: |
            const issue_number = context.issue.number;
            const body = (context.payload.issue.body || "").replace(/\r/g, "").replace(/<!--[^>]*-->/g, "");
            const missing = [];
            if (!process.env.BB_LICENSE_KEY) missing.push("BB_LICENSE_KEY");
            if (missing.length) {
              const header = "### BrowserBox Status";
              const { data: comments } = await github.rest.issues.listComments({ ...context.repo, issue_number, per_page: 100 });
              const mine = comments.find(c => c.user.type === "Bot" && (c.body||"").includes(header));
              if (mine) {
                const base = (mine.body || "").split("\n**Stages:**")[0];
                const list = [
                  "**Fix & Retry**",
                  ...(missing.includes("BB_LICENSE_KEY") ? ["- [ ] Add `BB_LICENSE_KEY` — https://dosaygo.com/commerce (or sales@dosaygo.com for a time-limited key)"] : []),
                  "- Then edit the **Control Panel** above and toggle **Power** OFF → ON to retry."
                ].join("\n");
                const body = `${base}
            **stages:** (updated automatically)
            - ⛔ missing secrets: \`${missing.join(", ")}\`
            ${list}
            `;
                await github.rest.issues.updateComment({ ...context.repo, comment_id: mine.id, body });
              }
              core.setFailed("Missing secrets: " + missing.join(", "));
            }

      - name: Install system deps (status)
        if: github.event_name != 'push'
        uses: actions/github-script@v7
        with:
          script: |
            const issue_number = context.issue.number;
            const header = "### BrowserBox Status";
            const { data: comments } = await github.rest.issues.listComments({ ...context.repo, issue_number, per_page: 100 });
            const mine = comments.find(c => c.user.type === "Bot" && (c.body||"").includes(header));
            if (mine) {
              const base = (mine.body || "").split("\n**Stages:**")[0];
              const body = `${base}
            **Stages:** (updated automatically)
            - 🛠️ Installing system deps…
            `;
              await github.rest.issues.updateComment({ ...context.repo, comment_id: mine.id, body });
            }

      - name: Install system deps
        run: |
          set -euo pipefail
          sudo apt-get update
          sudo apt-get install -y \
            libx11-xcb1 libxcomposite1 libxdamage1 libxext6 libxfixes3 \
            libnss3 libnspr4 libasound2t64 libatk1.0-0 libatk-bridge2.0-0 \
            libcups2 libxrandr2 libpangocairo-1.0-0 libgtk-3-0 \
            jq curl coreutils ca-certificates openssh-client lsof net-tools

      - name: Install bbx (status)
        if: github.event_name != 'push'
        uses: actions/github-script@v7
        with:
          script: |
            const issue_number = context.issue.number;
            const header = "### BrowserBox Status";
            const { data: comments } = await github.rest.issues.listComments({ ...context.repo, issue_number, per_page: 100 });
            const mine = comments.find(c => c.user.type === "Bot" && (c.body||"").includes(header));
            if (mine) {
              const base = (mine.body || "").split("\n**Stages:**")[0];
              const body = `${base}
            **Stages:** (updated automatically)
            - 💿 Installing bbx…
            `;
              await github.rest.issues.updateComment({ ...context.repo, comment_id: mine.id, body });
            }

      - name: Checkout
        uses: actions/checkout@v4

      - name: Install bbx
        timeout-minutes: 15
        env:
          BBX_HOSTNAME: ${{ env.BBX_HOSTNAME }}
          BBX_NO_UPDATE: "true"
          BB_QUICK_EXIT: "yesplease"
          EMAIL: "test@example.com"
          LICENSE_KEY: ${{ secrets.BB_LICENSE_KEY }}
          BBX_TEST_AGREEMENT: "true"
          STATUS_MODE: ${{ secrets.STATUS_MODE_KEY }}
          INSTALL_DOC_VIEWER: "false"
          WIN9X_COMPATIBILITY_MODE: ${{ env.WIN9X_COMPATIBILITY_MODE }}
        run: |
          set -euo pipefail
          if ! command -v bbx >/dev/null 2>&1; then
            bash <(curl -fsSL https://bbx.sh.dosaygo.com) install
          fi
          bbx --version || true

      - name: Certify & setup (status)
        if: github.event_name != 'push'
        uses: actions/github-script@v7
        with:
          script: |
            const issue_number = context.issue.number;
            const header = "### BrowserBox Status";
            const { data: comments } = await github.rest.issues.listComments({ ...context.repo, issue_number, per_page: 100 });
            const mine = comments.find(c => c.user.type === "Bot" && (c.body||"").includes(header));
            if (mine) {
              const base = (mine.body || "").split("\n**Stages:**")[0];
              const body = `${base}
            **Stages:** (updated automatically)
            - 🧾 Certifying & configuring…
            `;
              await github.rest.issues.updateComment({ ...context.repo, comment_id: mine.id, body });
            }

      - name: Activate and certify license
        env:
          LICENSE_KEY: ${{ secrets.BB_LICENSE_KEY }}
        run: |
          set -euo pipefail
          bbx certify "${LICENSE_KEY}"

      - name: Configure bbx and read login.link (initial)
        id: setup
        env:
          BBX_PORT: ${{ env.BBX_PORT }}
          BBX_HOSTNAME: ${{ env.BBX_HOSTNAME }}
          WIN9X_COMPATIBILITY_MODE: ${{ env.WIN9X_COMPATIBILITY_MODE }}
        run: |
          set -euo pipefail
          bbx setup --port "${BBX_PORT}" --hostname "${BBX_HOSTNAME}" >/dev/null
          LINK_FILE="$HOME/.config/dosyago/bbpro/login.link"
          [[ -s "$LINK_FILE" ]] || { echo "login.link not found or empty at $LINK_FILE"; exit 1; }
          url="$(tr -d '\r\n' < "$LINK_FILE")"
          echo "$url" | grep -Eq '^https?://' || { echo "login.link invalid"; exit 1; }
          origin="$(echo "$url" | sed -E 's|(https?://[^/]+).*|\1|')"
          suffix="${url#${origin}}"
          token="$(echo "$url" | grep -oP 'token=\K[^&]+' || true)"
          echo "::add-mask::$url"
          echo "::add-mask::$origin"
          echo "::add-mask::$suffix"
          echo "::add-mask::$token"
          echo "LOGIN LINK (from file): $url"
          echo "LOGIN ORIGIN: $origin"
          echo "LOGIN SUFFIX: $suffix"
          echo "LOGIN TOKEN: $token"
          {
            echo "url=${url}"
            echo "origin=${origin}"
            echo "suffix=${suffix}"
            echo "token=${token}"
          } >> "$GITHUB_OUTPUT"
          LOCAL_HTTP_ORIGIN="http://127.0.0.1:${BBX_PORT}"
          echo "LOCAL_HTTP_ORIGIN: ${LOCAL_HTTP_ORIGIN}"
          echo "LOCAL_HTTP_FULL: ${LOCAL_HTTP_ORIGIN}${suffix}"
          echo "::add-mask::$LOCAL_HTTP_ORIGIN"
          echo "::add-mask::${LOCAL_HTTP_ORIGIN}${suffix}"
          {
            echo "LOCAL_HTTP_ORIGIN=${LOCAL_HTTP_ORIGIN}"
            echo "LOCAL_HTTP_FULL=${LOCAL_HTTP_ORIGIN}${suffix}"
          } >> "$GITHUB_ENV"

      - name: Create integrity file (print contents)
        run: |
          set -euo pipefail
          mkdir -p "$HOME/.config/dosyago/bbpro"
          openssl rand -base64 32 | tr -d '\n' | tee "$HOME/BBPRO.INTEGRITY" > "$HOME/.config/dosyago/bbpro/BBPRO.INTEGRITY"
          echo "Integrity WANT (HOME): $(cat "$HOME/BBPRO.INTEGRITY")"
          echo "Integrity WANT (CONFIG): $(cat "$HOME/.config/dosyago/bbpro/BBPRO.INTEGRITY")"

      # ===== SSH tunnel path (reverse via localhost.run over HTTP) =====
      - name: Start bbx (SSH) – status
        if: github.event_name != 'push' && contains(github.event.issue.body, '- [x] ssh')
        uses: actions/github-script@v7
        with:
          script: |
            const issue_number = context.issue.number;
            const header = "### BrowserBox Status";
            const { data: comments } = await github.rest.issues.listComments({ ...context.repo, issue_number, per_page: 100 });
            const mine = comments.find(c => c.user.type === "Bot" && (c.body||"").includes(header));
            if (mine) {
              const base = (mine.body || "").split("\n**Stages:**")[0];
              const body = `${base}
            **Stages:** (updated automatically)
            - 🌐 Starting bbx + SSH reverse tunnel…
            `;
              await github.rest.issues.updateComment({ ...context.repo, comment_id: mine.id, body });
            }

      - name: Start SSH reverse tunnel (localhost.run; JSON output) + capture URL
        if: github.event_name == 'push' || (github.event_name != 'push' && contains(github.event.issue.body, '- [x] ssh'))
        id: ssh_tunnel
        env:
          BBX_PORT: ${{ env.BBX_PORT }}
        run: |
          set -euo pipefail
          LOG_JSON="${HOME}/localhostrun.jsonl"
          : > "$LOG_JSON"
          if command -v stdbuf >/dev/null 2>&1; then STD="stdbuf -o0 -e0"; else STD=""; fi

          SSH_OPTS=(
            -o StrictHostKeyChecking=no
            -o ExitOnForwardFailure=yes
            -o ServerAliveInterval=30
            -o ServerAliveCountMax=3
            -o TCPKeepAlive=yes
          )

          # NOTE: no -N (per your request)
          $STD ssh "${SSH_OPTS[@]}" -v -f \
            -R 80:127.0.0.1:${BBX_PORT} nokey@localhost.run -- --output json \
            &> "$LOG_JSON" || true

          exec 3< <(tail -n +1 -F "$LOG_JSON")
          start_epoch=$(date +%s)
          found_url=""; lineno=0
          while true; do
            if ! IFS= read -r -t 1 line <&3; then
              now=$(date +%s); (( now - start_epoch >= 90 )) && break; continue
            fi
            lineno=$((lineno+1))
            tsv=$(printf '%s\n' "$line" | jq -Rr '
              fromjson?
              | select(.event=="tcpip-forward" and .status=="success")
              | [(.address // .listen_host // ""),
                 (if .tls_termination then "true" else "false" end),
                 (.message // "")]
              | @tsv
            ' || true)
            [[ -z "$tsv" ]] && continue
            host=$(printf '%s' "$tsv" | cut -f1)
            tls=$(printf '%s' "$tsv" | cut -f2)
            message=$(printf '%s' "$tsv" | cut -f3-)
            if [[ -n "$host" ]]; then
              scheme="http"; [[ "$tls" == "true" ]] && scheme="https"
              found_url="${scheme}://${host}"
              echo "FOUND (address/listen_host at line $lineno): $found_url"
              break
            fi
            if [[ -n "$message" ]]; then
              msg_url=$(printf '%s' "$message" \
                | grep -oE 'https://[[:alnum:].-]+(:[0-9]+)?(/[[:graph:]]*)?' | head -n1 || true)
              if [[ -n "$msg_url" ]]; then
                found_url="$msg_url"
                echo "FOUND (message at line $lineno): $found_url"
                break
              fi
            fi
          done
          exec 3<&-

          if [[ -n "$found_url" ]]; then
            echo "::add-mask::$found_url"
            echo "url=$found_url" >> "$GITHUB_OUTPUT"
            {
              echo "SSH_URL=${found_url}"
              echo "ACCESS_SUFFIX=${{ steps.setup.outputs.suffix }}"
              echo "ACCESS_FULL=${found_url}${{ steps.setup.outputs.suffix }}"
              echo "SESSION_TOKEN=${{ steps.setup.outputs.token }}"
            } >> "$GITHUB_ENV"
            echo "::add-mask::${found_url}${{ steps.setup.outputs.suffix }}"
            echo "::add-mask::${{ steps.setup.outputs.token }}"
            exit 0
          fi

          echo "FAILED to discover public URL from mixed log after 90s."
          echo "--- Mixed log (tail) ---"; tail -n 200 "$LOG_JSON" || true
          exit 1

      # ===== TOR path (use login.link, not stdout) =====
      - name: Start bbx (Tor) – status
        if: github.event_name != 'push' && contains(github.event.issue.body, '- [x] tor')
        uses: actions/github-script@v7
        with:
          script: |
            const issue_number = context.issue.number;
            const header = "### BrowserBox Status";
            const { data: comments } = await github.rest.issues.listComments({ ...context.repo, issue_number, per_page: 100 });
            const mine = comments.find(c => c.user.type === "Bot" && (c.body||"").includes(header));
            if (mine) {
              const base = (mine.body || "").split("\n**Stages:**")[0];
              const body = `${base}
            **Stages:** (updated automatically)
            - 🌒 Starting bbx (Tor)…
            `;
              await github.rest.issues.updateComment({ ...context.repo, comment_id: mine.id, body });
            }

      - name: Start bbx for Tor hidden service
        if: github.event_name != 'push' && contains(github.event.issue.body, '- [x] tor')
        run: |
          set -euo pipefail
          bbx tor-run > tor_output.txt 2>&1 &

      - name: Read Tor login.link and prepare env
        if: github.event_name != 'push' && contains(github.event.issue.body, '- [x] tor')
        id: tor_setup
        run: |
          set -euo pipefail
          LINK_FILE="$HOME/.config/dosyago/bbpro/login.link"
          PAT='^https://[^[:space:]]+\.onion[^[:space:]]*$'
          for i in $(seq 1 60); do
            if [[ -s "$LINK_FILE" ]]; then
              url="$(tr -d '\r\n' < "$LINK_FILE")"
              if echo "$url" | grep -Eq "$PAT"; then
                echo "::add-mask::$url"
                token="$(echo "$url" | grep -oP 'token=\K[^&]+' || true)"
                [[ -n "$token" ]] && echo "::add-mask::$token"
                {
                  echo "ACCESS_FULL=${url}"
                  echo "SESSION_TOKEN=${token}"
                } >> "$GITHUB_ENV"
                echo "url=${url}" >> "$GITHUB_OUTPUT"
                exit 0
              fi
            fi
            sleep 2
          done
          echo "Timed out waiting for Tor login.link containing a valid .onion URL" >&2
          exit 1

      - name: Start bbx (background) and sanity-check local listener
        if: github.event_name == 'push' || (github.event_name != 'push' && contains(github.event.issue.body, '- [x] ssh'))
        env:
          BBX_PORT: ${{ env.BBX_PORT }}
          BBX_HOSTNAME: ${{ env.BBX_HOSTNAME }}
          WIN9X_COMPATIBILITY_MODE: ${{ env.WIN9X_COMPATIBILITY_MODE }}
        run: |
          set -euo pipefail
          echo "WIN9X_COMPATIBILITY_MODE=${WIN9X_COMPATIBILITY_MODE}"
          bbx run --port "${BBX_PORT}" --hostname "${BBX_HOSTNAME}" &
          sleep 3
          echo "--- LISTENERS ---"
          ss -ltnp | sed -n '1,120p' || true
          echo "--- LSOF ${BBX_PORT} ---"
          lsof -iTCP:${BBX_PORT} -sTCP:LISTEN -P -n || true
          echo "--- LOCAL CURLS (HTTP) ---"
          curl -sv "http://127.0.0.1:${BBX_PORT}/" -o /dev/null || true
          curl -sS "http://127.0.0.1:${BBX_PORT}/integrity" | head -c 200 || true; echo
          if [[ -n "${{ steps.setup.outputs.token }}" ]]; then
            echo "--- LOCAL INTEGRITY with ?session_token=... ---"
            curl -sS "http://127.0.0.1:${BBX_PORT}/integrity?session_token=${{ steps.setup.outputs.token }}" || true
            echo
          fi

      - name: Encrypt URL for actor (RSA only)
        if: github.event_name != 'push' && contains(github.event.issue.body, '- [x] Encrypt')
        id: encrypt
        env:
          ACTOR: ${{ github.actor }}
          ACCESS_FULL: ${{ env.ACCESS_FULL }}
        run: |
          set -euo pipefail
          mkdir -p .secure
          printf '%s' "${ACCESS_FULL}" > .secure/url.txt
          curl -sfL -H 'Accept: application/vnd.github+json' -H 'User-Agent: bbx-workflow' \
            "https://api.github.com/users/${ACTOR}/keys" -o .secure/keys.json || true
          rsa_from_json="$(jq -r '.[] | .key' .secure/keys.json 2>/dev/null | awk '/^ssh-rsa /{print; exit}' || true)"
          if [[ -z "$rsa_from_json" ]]; then
            curl -sfL -H 'User-Agent: bbx-workflow' "https://github.com/${ACTOR}.keys" -o .secure/keys.plain || true
            rsa_from_plain="$(awk '/^ssh-rsa /{print; exit}' .secure/keys.plain || true)"
          else
            rsa_from_plain=""
          fi
          rsa_line="${rsa_from_json:-$rsa_from_plain}"
          if [[ -z "$rsa_line" ]]; then echo "NO_RSA=1" >> "$GITHUB_OUTPUT"; exit 0; fi
          printf '%s\n' "$rsa_line" > .secure/actor_rsa.pub
          ssh-keygen -f .secure/actor_rsa.pub -e -m pem > .secure/actor_rsa.pem
          openssl pkeyutl -encrypt -pubin -inkey .secure/actor_rsa.pem \
            -pkeyopt rsa_padding_mode:oaep -pkeyopt rsa_oaep_md:sha256 \
            -in .secure/url.txt -out .secure/url.bin
          base64 -w 0 .secure/url.bin > .secure/url.b64
          echo "NO_RSA=0" >> "$GITHUB_OUTPUT"

      - name: Probe login links (local & edge; print bodies; no-fail)
        if: ${{ success() }}
        env:
          ACCESS_FULL: ${{ env.ACCESS_FULL }}
          LOCAL_HTTP_FULL: ${{ env.LOCAL_HTTP_FULL }}
        run: |
          set +e
          echo "Probing LOCAL login link (HTTP): ${LOCAL_HTTP_FULL}"
          for i in $(seq 1 12); do
            code=$(curl -i -L -sS -o /tmp/probe_local.$$ -w '%{http_code}' "${LOCAL_HTTP_FULL}")
            echo "LOCAL attempt $i — HTTP $code"
            head -n 200 /tmp/probe_local.$$; echo
            [[ "$code" != "000" ]] && break
            sleep 2
          done
          rm -f /tmp/probe_local.$$
          echo "Probing EDGE login link (HTTPS via localhost.run): ${ACCESS_FULL}"
          for i in $(seq 1 20); do
            code=$(curl -i -L -sS -o /tmp/probe_edge.$$ -w '%{http_code}' "${ACCESS_FULL}")
            echo "EDGE attempt $i — HTTP $code"
            head -n 200 /tmp/probe_edge.$$; echo
            [[ "$code" != "000" ]] && break
            sleep 2
          done
          rm -f /tmp/probe_edge.$$

      - name: Verify integrity (debug; 5m hold on failure)
        if: ${{ success() }}
        env:
          BBX_PORT: ${{ env.BBX_PORT }}
          SSH_URL: ${{ env.SSH_URL }}
          SESSION_TOKEN: ${{ env.SESSION_TOKEN }}
        run: |
          set +euo pipefail
          normalize(){ sed -e 's/[\r\n]*$//'; }
          WANT="$HOME/BBPRO.INTEGRITY"; [[ -s "$WANT" ]] || WANT="$HOME/.config/dosyago/bbpro/BBPRO.INTEGRITY"
          want="$(cat "$WANT" 2>/dev/null || true)"; want_norm="$(printf %s "$want" | normalize)"
          {
            echo "=== VERIFY DEBUG ==="
            echo "Local login.link: ${{ steps.setup.outputs.url }}"
            echo "Origin: ${{ steps.setup.outputs.origin }}"
            echo "Suffix: ${{ steps.setup.outputs.suffix }}"
            echo "SSH_URL: ${SSH_URL:-<none>}"
            echo "SESSION_TOKEN: ${SESSION_TOKEN:-<none>}"
            echo "Integrity file (cat): ${want}"
            echo "want_len=$(printf %s "$want" | wc -c)"
          } | tee /tmp/int_debug.txt
          req(){ # label url
            label="$1"; url="$2"
            printf "\n--- %s ---\nURL: %s\n" "$label" "$url" | tee -a /tmp/int_debug.txt
            code=$(curl -sSL -D /tmp/h.$$ -o /tmp/b.$$ -w '%{http_code}' "$url" || true)
            clen=$(wc -c < /tmp/b.$$ | tr -d ' ')
            head -c 200 /tmp/b.$$ | sed '1s/^/Body head (200 bytes): /' | tee -a /tmp/int_debug.txt
            echo -e "\nHTTP $code, body_len=$clen" | tee -a /tmp/int_debug.txt
            got_norm="$(printf %s "$(< /tmp/b.$$)" | normalize)"
            [[ "$got_norm" == "$want_norm" ]]
            rc=$?
            rm -f /tmp/h.$$ /tmp/b.$$
            return $rc
          }
          ok=0
          req "local /integrity?session_token=…" "http://127.0.0.1:${BBX_PORT}/integrity?session_token=${SESSION_TOKEN}" && ok=1
          if [[ $ok -eq 0 && -n "${SSH_URL:-}" ]]; then
            req "edge /integrity?session_token=…" "${SSH_URL}/integrity?session_token=${SESSION_TOKEN}" && ok=1
          fi
          if [[ $ok -eq 1 ]]; then
            echo "Integrity verified successfully."
            exit 0
          else
            echo "Integrity check FAILED — holding for 5 minutes BEFORE shutdown to allow manual debugging."
            touch /tmp/HOLD_FOR_DEBUG
            echo "=== BEGIN FULL DEBUG DUMP ==="; cat /tmp/int_debug.txt || true; echo "=== END FULL DEBUG DUMP ==="
            sleep 300
            exit 1
          fi

      - name: Upload integrity debug bundle
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: integrity-debug
          path: /tmp/int_debug.txt

      - name: Upload localhost.run logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: localhostrun-logs
          path: |
            ~/localhostrun.jsonl
            ~/localhostrun.err

      - name: Status → Ready (encrypted)
        if: github.event_name != 'push' && contains(github.event.issue.body, '- [x] Encrypt') && steps.encrypt.outputs.NO_RSA == '0'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const issue_number = context.issue.number;
            const header = "### BrowserBox Status";
            const encB64 = fs.readFileSync('.secure/url.b64', 'utf8').trim();
            const oneLiner =
              'read -rp "RSA key [~/.ssh/id_rsa_github]: " K; K="${K:-$HOME/.ssh/id_rsa_github}"; ' +
              'T="$(mktemp)"; echo "Paste ENC_B64 then Ctrl-D"; base64 -d >"$T"; ' +
              'if grep -q "BEGIN OPENSSH PRIVATE KEY" "$K"; then P="$(mktemp)"; cp "$K" "$P"; ' +
              'ssh-keygen -p -m PEM -f "$P" -P "" -N "" >/dev/null 2>&1 || { echo "Convert once: ssh-keygen -p -m PEM -f \\"$K\\""; rm -f "$T" "$P"; exit 1; }; ' +
              'K="${P}"; fi; echo; openssl pkeyutl -decrypt -inkey "$K" -pkeyopt rsa_padding_mode:oaep -pkeyopt rsa_oaep_md:sha256 -in "$T" -out -; echo; rm -f "$T" "${P:-}"';
            const { data: comments } = await github.rest.issues.listComments({ ...context.repo, issue_number, per_page: 100 });
            const mine = comments.find(c => c.user.type === "Bot" && (c.body||"").includes(header));
            if (mine) {
              const base = (mine.body || "").split("\n**Stages:**")[0];
              const body = `${base}
            **Stages:** (updated automatically)
            - ✅ Ready
            **Decrypt locally (paste blob, then Ctrl-D):**
            \`\`\`bash
            ${oneLiner}
            \`\`\`
            **Encrypted blob (base64):**
            \`\`\`
            ${encB64}
            \`\`\`
            `;
              await github.rest.issues.updateComment({ ...context.repo, comment_id: mine.id, body });
            }

      - name: Status → Ready (plaintext)
        if: >
          github.event_name != 'push' && (
            !contains(github.event.issue.body, '- [x] Encrypt') ||
            (contains(github.event.issue.body, '- [x] Encrypt') && steps.encrypt.outputs.NO_RSA == '1' && env.REQUIRE_RSA != 'true')
          )
        uses: actions/github-script@v7
        env:
          ACCESS_FULL: ${{ env.ACCESS_FULL }}
        with:
          script: |
            const issue_number = context.issue.number;
            const header = "### BrowserBox Status";
            const full = process.env.ACCESS_FULL;
            const encWanted = `${{ contains(github.event.issue.body, '- [x] Encrypt') && 'true' || 'false' }}` === 'true';
            const note = encWanted
              ? 'Encryption was selected but no SSH RSA key was found; posting plaintext this time.'
              : 'Encryption not selected.';
            const { data: comments } = await github.rest.issues.listComments({ ...context.repo, issue_number, per_page: 100 });
            const mine = comments.find(c => c.user.type === "Bot" && (c.body||"").includes(header));
            if (mine) {
              const base = (mine.body || "").split("\n**Stages:**")[0];
              const body = `${base}
            **Stages:** (updated automatically)
            - ✅ Ready
            ${note}
            **Login link:**
            ${full}
            `;
              await github.rest.issues.updateComment({ ...context.repo, comment_id: mine.id, body });
            }

      - name: Watchdog — OFF monitoring + SSH tunnel auto-restart (edits status)
        if: github.event_name != 'push'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          BBX_PORT: ${{ env.BBX_PORT }}
          SESSION_MINUTES: ${{ env.SESSION_MINUTES }}
          ISSUE_NUMBER: ${{ env.ISSUE_NUMBER }}
          REPO: ${{ env.REPO }}
          ACCESS_SUFFIX: ${{ env.ACCESS_SUFFIX }}
          SESSION_TOKEN: ${{ env.SESSION_TOKEN }}
          ACTOR: ${{ github.actor }}
        run: |
          set -euo pipefail

          secs=$(( ${SESSION_MINUTES} * 60 ))
          end=$(( $(date +%s) + secs ))
          issue_api="https://api.github.com/repos/${REPO}/issues/${ISSUE_NUMBER}"
          comments_api="${issue_api}/comments"
          header="### BrowserBox Status"

          SSH_OPTS=(
            -o StrictHostKeyChecking=no
            -o ExitOnForwardFailure=yes
            -o ServerAliveInterval=30
            -o ServerAliveCountMax=3
            -o TCPKeepAlive=yes
          )

          LOG_JSON="${HOME}/localhostrun.jsonl"

          get_status_comment() {
            curl -sfL -H "Authorization: Bearer ${GH_TOKEN}" -H "Accept: application/vnd.github+json" \
              "${comments_api}?per_page=100" \
            | jq -c --arg h "$header" '[.[] | select(.user.type=="Bot" and (.body // "") | contains($h))] | .[0]'
          }

          update_comment_body() { # $1: comment_id, $2: new_body
            curl -sfL -X PATCH -H "Authorization: Bearer ${GH_TOKEN}" -H "Accept: application/vnd.github+json" \
              -d "$(jq -nc --arg b "$2" '{body:$b}')" \
              "https://api.github.com/repos/${REPO}/issues/comments/$1" >/dev/null || true
          }

          reencrypt_blob() { # echoes new base64 blob to stdout
            set -euo pipefail
            mkdir -p .secure
            printf '%s' "${ACCESS_FULL}" > .secure/url.txt

            # fetch first RSA key for ACTOR
            curl -sfL -H 'Accept: application/vnd.github+json' \
              "https://api.github.com/users/${ACTOR}/keys" -o .secure/keys.json || true
            rsa_from_json="$(jq -r '.[] | .key' .secure/keys.json 2>/dev/null | awk '/^ssh-rsa /{print; exit}' || true)"
            if [[ -z "$rsa_from_json" ]]; then
              curl -sfL "https://github.com/${ACTOR}.keys" -o .secure/keys.plain || true
              rsa_from_plain="$(awk '/^ssh-rsa /{print; exit}' .secure/keys.plain || true)"
            else
              rsa_from_plain=""
            fi
            rsa_line="${rsa_from_json:-$rsa_from_plain}"
            [[ -z "$rsa_line" ]] && { echo ""; return 0; }

            printf '%s\n' "$rsa_line" > .secure/actor_rsa.pub
            ssh-keygen -f .secure/actor_rsa.pub -e -m pem > .secure/actor_rsa.pem
            openssl pkeyutl -encrypt -pubin -inkey .secure/actor_rsa.pem \
              -pkeyopt rsa_padding_mode:oaep -pkeyopt rsa_oaep_md:sha256 \
              -in .secure/url.txt -out .secure/url.bin
            base64 -w 0 .secure/url.bin
          }

          start_tunnel() {
            : > "$LOG_JSON"
            if command -v stdbuf >/dev/null 2>&1; then STD="stdbuf -o0 -e0"; else STD=""; fi
            $STD ssh "${SSH_OPTS[@]}" -v -f \
              -R 80:127.0.0.1:${BBX_PORT} nokey@localhost.run -- --output json \
              &> "$LOG_JSON" || true
            local found_url=""; local start_epoch=$(date +%s)
            exec 3< <(tail -n +1 -F "$LOG_JSON")
            while true; do
              if ! IFS= read -r -t 1 line <&3; then
                now=$(date +%s); (( now - start_epoch >= 60 )) && break; continue
              fi
              tsv=$(printf '%s\n' "$line" | jq -Rr '
                fromjson?
                | select(.event=="tcpip-forward" and .status=="success")
                | [(.address // .listen_host // ""),
                   (if .tls_termination then "true" else "false" end),
                   (.message // "")]
                | @tsv
              ' || true)
              [[ -z "$tsv" ]] && continue
              host=$(printf '%s' "$tsv" | cut -f1)
              tls=$(printf '%s' "$tsv" | cut -f2)
              message=$(printf '%s' "$tsv" | cut -f3-)
              if [[ -n "$host" ]]; then
                scheme="http"; [[ "$tls" == "true" ]] && scheme="https"
                found_url="${scheme}://${host}"
                break
              fi
              if [[ -n "$message" ]]; then
                msg_url=$(printf '%s' "$message" \
                  | grep -oE 'https://[[:alnum:].-]+(:[0-9]+)?(/[[:graph:]]*)?' | head -n1 || true)
                [[ -n "$msg_url" ]] && { found_url="$msg_url"; break; }
              fi
            done
            exec 3<&-
            if [[ -n "$found_url" ]]; then
              echo "::add-mask::$found_url"
              export SSH_URL="$found_url"
              export ACCESS_FULL="${SSH_URL}${ACCESS_SUFFIX}"
              echo "Re-established tunnel: $SSH_URL"
              # -------- Update the existing status comment (no new comment) --------
              sc="$(get_status_comment)"
              cid="$(printf '%s' "$sc" | jq -r '.id // empty')"
              body="$(printf '%s' "$sc" | jq -r '.body // empty')"
              if [[ -n "$cid" && -n "$body" ]]; then
                ts="$(date -u +'%Y-%m-%dT%H:%M:%SZ')"
                # prefer encrypted update if the comment currently uses encryption
                if printf '%s' "$body" | grep -q 'Encrypted blob (base64):'; then
                  newb64="$(reencrypt_blob)"
                  if [[ -n "$newb64" ]]; then
                    body="$(printf '%s' "$body" \
                      | sed -E "s#(\*\*Stages:\*\*.*)- ✅ Ready#\1- ✅ Ready\n⚠️ **(Tunnel address updated at ${ts})**#; t;")"
                    body="$(printf '%s\n' "$body" \
                      | awk '
                          BEGIN{p=1}
                          /^```$/ && code==1 {code=0; print; next}
                          /^```$/ && code==0 && block==1 {code=1; print; next}
                          /Encrypted blob \(base64\):/ {print; print "```"; print ENVIRON["NEWB64"]; print "```"; block=1; skip=1; next}
                          { if(!skip) print }
                          END{}
                        ' NEWB64="$newb64")"
                    update_comment_body "$cid" "$body"
                  else
                    # fallback: plaintext line (actor had no RSA key now)
                    body="$(printf '%s' "$body" \
                      | sed -E "s#(\*\*Stages:\*\*.*)- ✅ Ready#\1- ✅ Ready\n⚠️ **(Tunnel address updated at ${ts})**#; t;")"
                    if printf '%s' "$body" | grep -q '\*\*Login link:\*\*'; then
                      body="$(printf '%s' "$body" | sed -E "s#(\*\*Login link:\*\*\s*).*#\1${ACCESS_FULL}#")"
                    else
                      body="${body}\n**Login link:**\n${ACCESS_FULL}\n"
                    fi
                    update_comment_body "$cid" "$body"
                  fi
                else
                  # plaintext update
                  body="$(printf '%s' "$body" \
                    | sed -E "s#(\*\*Stages:\*\*.*)- ✅ Ready#\1- ✅ Ready\n⚠️ **(Tunnel address updated at ${ts})**#; t;")"
                  if printf '%s' "$body" | grep -q '\*\*Login link:\*\*'; then
                    body="$(printf '%s' "$body" | sed -E "s#(\*\*Login link:\*\*\s*).*#\1${ACCESS_FULL}#")"
                  else
                    body="${body}\n**Login link:**\n${ACCESS_FULL}\n"
                  fi
                  update_comment_body "$cid" "$body"
                fi
              fi
              # --------------------------------------------------------------------
              return 0
            fi
            echo "Failed to obtain tunnel URL after restart attempt."
            return 1
          }

          tunnel_ok() {
            pgrep -f 'ssh .*localhost\.run' >/dev/null 2>&1 || return 1
            if [[ -n "${SSH_URL:-}" ]]; then
              code=$(curl -i -L -sS -o /dev/null -w '%{http_code}' "${SSH_URL}${ACCESS_SUFFIX}" || true)
              [[ "$code" != "000" ]] || return 1
            fi
            return 0
          }

          bbx_alive() {
            curl -sS "http://127.0.0.1:${BBX_PORT}/integrity?session_token=${SESSION_TOKEN}" -m 3 -o /dev/null >/dev/null 2>&1
          }

          off_count=0
          while (( $(date +%s) < end )); do
            # OFF monitoring
            body="$(curl -sfL -H "Authorization: Bearer ${GH_TOKEN}" -H "Accept: application/vnd.github+json" "$issue_api" | jq -r '.body // ""')"
            clean="$(printf '%s' "$body" | tr -d '\r' | sed -E 's/<!--[^>]*-->//g')"
            if printf '%s\n' "$clean" | grep -Eqi '(^|\n)[[:space:]]*-[[:space:]]*\[x\][[:space:]]*on([[:space:]]|$)'; then
              off_count=0
            else
              off_count=$((off_count+1))
              if (( off_count >= 2 )); then
                echo "OFF detected twice consecutively. Stopping bbx."
                bbx stop || true
                exit 0
              fi
            fi

            # Tunnel health → restart + status-edit
            if bbx_alive; then
              if ! tunnel_ok; then
                echo "Tunnel missing/unhealthy — attempting restart…"
                start_tunnel || echo "Restart attempt failed; will retry."
              fi
            else
              echo "bbx seems down (no local integrity). Not restarting tunnel."
            fi

            sleep 10
          done

      - name: Status → Closed
        if: always() && github.event_name != 'push'
        uses: actions/github-script@v7
        with:
          script: |
            const issue_number = context.issue.number;
            const header = "### BrowserBox Status";
            const { data: comments } = await github.rest.issues.listComments({ ...context.repo, issue_number, per_page: 100 });
            const mine = comments.find(c => c.user.type === "Bot" && (c.body||"").includes(header));
            if (mine) {
              const base = (mine.body || "").split("\n**Stages:**")[0];
              const body = `${base}
            **Stages:** (updated automatically)
            - ⏹️ Session ended
            `;
              await github.rest.issues.updateComment({ ...context.repo, comment_id: mine.id, body });
            }

      - name: Cleanup — stop bbx and tunnels
        if: always()
        run: |
          set -euo pipefail
          if [[ -f /tmp/HOLD_FOR_DEBUG ]]; then
            echo "Cleanup: debug hold already elapsed; proceeding."
          fi
          bbx stop || true
          pkill -f 'ssh -f -N .*localhost\.run' || true
          pkill -f 'ssh .*localhost\.run' || true
          pkill -f 'ssh .*@.*' || true
