Bugs
  - youtube (and for example: github, first dir entry line; and nypost, some header line) not displaying some text boxes. Must be occlusion logic issues. 
  - as usual follow our debug process:
    - find out why this happens with a targeted simple reproduction
    - solve the biggest cause we can
- FIXED! NY Post fixed. Issue was vertical overlap that didn't occlude text in close together lines
- FIXED! YouTube (we were hiding text nodes with zero dimensions, even if their parents had non zero dimensions. As it's not possible to "style" text nodes in CSS, we can ignore zero dims on text nodes which may perhaps (I don't know) happen due to shadow dom replacement, etc, and just look at parent element.
- FIXED! GitHub fixed. Screen reader type of text with small dimensions in parent tree (1, 1 px or 2, 2 px etc) was being treated as visible and rendered occluding actual layout text.


Bugs
  - test13 - Clipped Child Text is not displayed on GUI but is not TUI - minor occlusion edge case bug
  - as usual follow our debug process:
    - find out why this happens with a targeted simple reproduction
    - solve the biggest cause we can

Bugs
  - If multiple tabs then we are pulling data from all tabs, when we should only focus on active.

- form controls
- ensure the tabs operate correctly, tab and cursor through all the controls at top, showing element focus clearly. Update style (move from green to blue, ice color i think is good). Ensure that URL is always in omnibox unless we are typing something in, or focused on it. As soon as we unfocus, or whenever url changes, or a tab is selected, and we are not focused in omnibox ensure URL in omnixbox reflects URL of current tab. Only exception is we never show the URL for newtab "about:blank". 
- ensure gaps are "correct" (where they should be, not weird random space after inline, etc)
- put media placeholders behind a toggle. So normally it's off, but you can toggle it on to view it (toggle setting will rerender)
- improve efficiency of rendering. Only split snapshot on visible boxes.
- ensure layout remains correct beofre proceeding
- hook modals for js modals (alert, confirm, prompt), http basic auth, and file upload.
- add ALT text for media placeholders (maybe decide based on space available? Or just make space. Problem is alt text has not text layout boxes so we'd have to create our own, and handle wrapping and truncation etc)
- scrollin : within local tui "virtual TUI viewport" (larger than TUI page to account for the stuff we push rightward and downward for layout), implement hoz and vert scrolling to show "pushed for layout" content, that blends to scrolling the remote when reaching the margins of that virtual viewport - also ensure we "size the remote" to a "good size" relative to our local TUI dimensions
- capture loading events from browserbox and display a 2x2 or 3x2 cursor "square" at screen right (like Netscape loading logo), showing loading (maybe just cursor rotating inside it clockwise. 1.5 - 2 Hz  


To be omitted from initial public release

- rendering of OOPIF (as that involves fetching target info from separate target and stitching together)
- web side client for this text layout of the web
